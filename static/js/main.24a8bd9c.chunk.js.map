{"version":3,"sources":["stores/auth.store.ts","stores/index.ts","hooks/useStores.ts","pages/login/LoginPage.tsx","components/hocs/protected.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AuthStore","this","loading","setTimeout","runInAction","Boolean","token","observable","computed","action","configure","enforceActions","auth","storeContext","createContext","stores","useStores","useContext","Password","Background","styled","div","Card","animate","CardTitle","h1","ActionsContainer","Button","LoginPage","useState","username","setUsername","password","setPassword","setAnimate","useEffect","reaction","useObserver","style","display","flexDirection","placeholder","width","disabled","value","onChange","target","marginTop","type","onClick","login","protectRoute","AdminRoutes","Component","props","authenticated","to","pathname","path","App","exact","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAEaA,G,OAAb,mPAcIC,KAAKC,SAAU,EAEfC,YACE,kBACEC,YAAY,SAAS,WACnB,EAAKF,SAAU,OAEnB,KArBN,qFASI,OAAOG,QAAQJ,KAAKK,WATxB,wCACGC,KADH,wEAEkB,MAFlB,qCAIGA,KAJH,yEAKqB,KALrB,yCAOGC,KAPH,2GAYGC,KAZH,qECCAC,YAAU,CAAEC,eAAgB,aAEb,OACbC,KAAM,IAAIZ,GCHNa,EAAeC,wBAAcC,GAE5B,SAASC,IACd,OAAOC,qBAAWJ,G,ypCCCZK,E,IAAAA,SA0DFC,EAAaC,IAAOC,IAAV,KAeVC,EAAOF,IAAOC,IAAV,KAKN,qBAAGE,SACI,gEAuBLC,EAAYJ,IAAOK,GAAV,KAITC,EAAmBN,IAAOC,IAAV,KAMhBM,EAASP,YAAO,IAAPA,CAAH,KAIGQ,EAlHa,WAAO,IACzBhB,EAASI,IAATJ,KADwB,EAEAiB,mBAAS,IAFT,mBAEzBC,EAFyB,KAEfC,EAFe,OAGAF,mBAAS,IAHT,mBAGzBG,EAHyB,KAGfC,EAHe,OAIFJ,oBAAS,GAJP,mBAIzBN,EAJyB,KAIhBW,EAJgB,KAehC,OATAC,qBACE,kBACEC,aACE,kBAAMxB,EAAKV,WACX,kBAAMgC,GAAYtB,EAAKV,cAE3B,CAACU,IAGIyB,aAAY,WACjB,IAAMnC,EAAUU,EAAKV,QAErB,OACE,kBAACiB,EAAD,KACE,kBAACG,EAAD,CAAMC,QAASA,GACb,kBAACC,EAAD,eAEA,yBAAKc,MAAO,CAAEC,QAAS,OAAQC,cAAe,WAC5C,uBACEC,YAAY,aACZH,MAAO,CAAEI,MAAO,KAChBC,SAAUzC,EACV0C,MAAOd,EACPe,SAAU,gBAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA2Bb,EAAYa,MAGnD,kBAAC1B,EAAD,CACEyB,SAAUzC,EACVuC,YAAY,QACZH,MAAO,CAAEI,MAAO,IAAKK,UAAW,GAChCH,MAAOZ,EACPa,SAAU,gBAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA2BX,EAAYW,MAGnD,kBAAClB,EAAD,KACE,kBAACC,EAAD,CACEqB,KAAK,UACL9C,QAASA,EACT+C,QAAS,kBAAMrC,EAAKsC,UAHtB,kBC7BCC,ICFTC,EDdN,SAAyBC,GAavB,OAZwC,SAAAC,GAAU,IACxC1C,EAASI,IAATJ,KAER,OAAOyB,aAAY,kBACjBzB,EAAK2C,cACH,kBAACF,EAAcC,GAEf,kBAAC,IAAD,CAAUE,GAAI,CAAEC,SAAU,gBCMJN,EAAa,kBACzC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,KAAK,KACV,yCAKSC,EAtBO,kBACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,UAChB,kBAACN,EAAD,OAGF,kBAAC,IAAD,CAAOM,KAAK,KACV,kBAAC,EAAD,UCDYrD,QACW,cAA7BwD,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.24a8bd9c.chunk.js","sourcesContent":["import { observable, computed, action, runInAction } from \"mobx\";\n\nexport class AuthStore {\n  @observable\n  token: string = \"\";\n\n  @observable\n  loading: boolean = false;\n\n  @computed\n  get authenticated(): boolean {\n    return Boolean(this.token);\n  }\n\n  @action\n  async login() {\n    this.loading = true;\n\n    setTimeout(\n      () =>\n        runInAction(\"login\", () => {\n          this.loading = false;\n        }),\n      5e3\n    );\n  }\n}\n","import { configure } from \"mobx\";\nimport { AuthStore } from \"./auth.store\";\n\nconfigure({ enforceActions: \"observed\" });\n\nexport default {\n  auth: new AuthStore()\n};\n","import { createContext, useContext } from \"react\";\nimport { default as stores } from \"../stores\";\n\nconst storeContext = createContext(stores);\n\nexport function useStores() {\n  return useContext(storeContext);\n}\n","import React, { useState, useEffect } from \"react\";\nimport { default as styled } from \"styled-components\";\nimport { Button as AntdButton, Input } from \"antd\";\nimport { useStores } from \"../../hooks\";\nimport { useObserver } from \"mobx-react\";\nimport { reaction } from \"mobx\";\n\nconst { Password } = Input;\n\nconst LoginPage: React.FC = () => {\n  const { auth } = useStores();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [animate, setAnimate] = useState(false);\n\n  useEffect(\n    () =>\n      reaction(\n        () => auth.loading,\n        () => setAnimate(!auth.loading)\n      ),\n    [auth]\n  );\n\n  return useObserver(() => {\n    const loading = auth.loading;\n\n    return (\n      <Background>\n        <Card animate={animate}>\n          <CardTitle>Entrar</CardTitle>\n\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Input\n              placeholder=\"UsuÃ¡rio\"\n              style={{ width: 300 }}\n              disabled={loading}\n              value={username}\n              onChange={({ target: { value } }) => setUsername(value)}\n            />\n\n            <Password\n              disabled={loading}\n              placeholder=\"Senha\"\n              style={{ width: 300, marginTop: 8 }}\n              value={password}\n              onChange={({ target: { value } }) => setPassword(value)}\n            />\n\n            <ActionsContainer>\n              <Button\n                type=\"primary\"\n                loading={loading}\n                onClick={() => auth.login()}\n              >\n                Entrar\n              </Button>\n            </ActionsContainer>\n          </div>\n        </Card>\n      </Background>\n    );\n  });\n};\n\nconst Background = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n\n  background: rgb(158, 208, 255);\n  background: linear-gradient(\n    135deg,\n    rgba(158, 208, 255, 1) 0%,\n    rgba(24, 144, 255, 1) 13%,\n    rgba(0, 45, 87, 1) 100%\n  );\n`;\n\nconst Card = styled.div<{ animate?: boolean }>`\n  padding: 20px;\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 6px 9px 20px 4px #0000003d;\n  ${({ animate }) =>\n    animate && `animation: shake 0.82s cubic-bezier(.36,.07,.19,.97) both;`}\n\n  @keyframes shake {\n    10%,\n    90% {\n      transform: translate3d(-1px, 0, 0);\n    }\n    20%,\n    80% {\n      transform: translate3d(2px, 0, 0);\n    }\n    30%,\n    50%,\n    70% {\n      transform: translate3d(-4px, 0, 0);\n    }\n    40%,\n    60% {\n      transform: translate3d(4px, 0, 0);\n    }\n  }\n`;\n\nconst CardTitle = styled.h1`\n  color: grey;\n`;\n\nconst ActionsContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 8px;\n`;\n\nconst Button = styled(AntdButton)`\n  width: 50%;\n`;\n\nexport default LoginPage;\n","import React from \"react\";\nimport { useObserver } from \"mobx-react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useStores } from \"../../hooks\";\n\nfunction protectRoute<T>(Component: React.FC<T>): React.FC<T> {\n  const ProtectedComponent: React.FC<T> = props => {\n    const { auth } = useStores();\n\n    return useObserver(() =>\n      auth.authenticated ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to={{ pathname: \"/login\" }} />\n      )\n    );\n  };\n\n  return ProtectedComponent;\n}\n\nexport default protectRoute;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { LoginPage } from \"./pages/login\";\nimport protectRoute from \"./components/hocs/protected\";\n\nconst App: React.FC = () => (\n  <Router>\n    <Switch>\n      <Route exact path=\"/admin\">\n        <AdminRoutes />\n      </Route>\n\n      <Route path=\"/\">\n        <LoginPage />\n      </Route>\n    </Switch>\n  </Router>\n);\n\nconst AdminRoutes: React.FC = protectRoute(() => (\n  <Switch>\n    <Route path=\"/\">\n      <span>ok</span>\n    </Route>\n  </Switch>\n));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}